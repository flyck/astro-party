---
import { db, Tasks, eq, Participants, Parties } from "astro:db";
import { toastResponse, ToastError } from "../../../utils/toast";
import { getPartyIdOrThrowToast } from "../../../utils/utils";
import StatusBadge from "../../../components/statusBadge.astro";
import type { Status } from "../../../components/statusBadge.astro";
import Modal from "../../../layouts/Modal.astro";
import Input from "../../../components/mini/input.astro";
import SubmitButton from "../../../components/submitButton.astro";
import DeleteButton from "../../../components/deleteButton.astro";
import StatusDropdown from "../../../components/statusDropdown.astro";
import AssigneeDropdown from "../../../components/assigneeDropdown.astro";
import CreateTaskModal from "../../../components/modals/createTask.astro";
import { openModalId } from "../../[partyId]/tasks.astro";

const { request } = Astro;

let tasks = [];
let participants = [];
try {
  const id = getPartyIdOrThrowToast(request);

  const party = await db.select().from(Parties).where(eq(Parties.id, id));
  if (party.length === 0) {
    throw new ToastError("danger", "Party does not exist.", 400);
  }

  tasks = await db.select().from(Tasks).where(eq(Tasks.partyId, id));
  participants = await db
    .select()
    .from(Participants)
    .where(eq(Participants.partyId, id));
} catch (error) {
  if (error instanceof ToastError) {
    return toastResponse(error);
  }
  return toastResponse(
    new ToastError("danger", "Something went wrong. :(", 500),
  );
}
---
<ul id="openEditTaskModal">
  {tasks.map((t, index) =>
  <div id={index.toString()} class="flex items-center justify-between border-b border-gray-500 p-2 cursor-pointer"
       data-id={t.id.toString()} data-title={t.title.toString()}
       data-status={t.status} data-description={t.description} data-assignee={t.assignee}>
    <div class="text-sm">{t.title || "?"}{t.assignee ? ` (${participants.find(participant => participant.id == t.assignee)!.name})` : ''}</div>
    <StatusBadge status={t.status as Status} />
  </div>
  )}
</ul>


<CreateTaskModal buttonId={openModalId} assignees={participants.map((p) => ({id: p.id ,name: p.name}))}/>

<Modal title="Edit Task" openModalId="openEditTaskModal">
  <form
    hx-post="/server/task/update"
    hx-swap="none"
    >
    <Input id="modal-id" name="id" title="Id" class="hidden" type="text" value="init"></Input>
    <Input id="modal-title" name="title" title="Title" type="text" value="init"></Input>
    <AssigneeDropdown id="modal-assignee" selected="" assignees={participants.map((p) => ({id: p.id ,name: p.name}))}/>
    <StatusDropdown id="modal-status" selected="" />
    <Input id="modal-description" name="description" title="Description" type="text" value="init" ></Input>

    <DeleteButton url="/server/task/delete" />
    <SubmitButton>Ok</SubmitButton>
  </form>
</Modal>

<script is:inline>
    // Get the item list
    var itemList = document.getElementById('openEditTaskModal');

    // When a list item is clicked, open the modal with the corresponding content
    itemList.addEventListener('click', function(e) {
      const properties = ["id", "title", "assignee", "status", "description"];

      // as data-attributes are not inherited, find the data-holding parent if a child-div was clicked.
      let target = e.target;
      while (target) {
        if (target.dataset.id) {
          break;
        }
        target = target.parentNode;
      }

      // transfer the task properties from the button metadata into the modal inputs
      properties.forEach((property) => {
        var value = target.getAttribute(`data-${property}`);
        document.getElementById(`modal-${property}`).value = value;
        document.getElementById(`modal-${property}`).dataset[property] = value;
      })
    });
</script>
