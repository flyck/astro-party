---
import * as z from 'zod';
const { request } = Astro;
import { db, eq, and, Participants } from 'astro:db';
import { toastResponse, ToastError } from "../../../components/toast.astro"

const inputSchema = z.object({
  id: z.string().transform(p => parseInt(p)),
  name: z.string().min(1).max(100),
  email: z.string().max(100),
});

try {
  const url = new URL(request.headers.get("Hx-Current-Url") || "")
  const partyId = url.pathname.split("/")[1] || ""

  if (!partyId ) {
    throw new ToastError("danger", "Bad request", 400)
  }

  const data = await request.formData()
  let inputJson: {[key: string]: any} = {}
  data.forEach((value, key: string) => {inputJson[key] = value})

  const parsedInput = inputSchema.safeParse(inputJson)

  if (!parsedInput.success) {
    throw new ToastError("warning", "Bad input", 400)
  }

  const updateResult = await db.update(Participants).set(
    {...parsedInput.data}
  ).where(and(eq(Participants.partyId, partyId), eq(Participants.id, parsedInput.data.id)))

  console.log(updateResult)

  return new Response(JSON.stringify({ ok: true }), {
    status: 200,
    headers: {
      "hx-redirect": `participants`,
    },
  })
} catch(error) {
  console.log(error)
  if (error instanceof ToastError) {
    return toastResponse(error)
  }
  return toastResponse(new ToastError("danger", "Something went wrong. :(", 500))
}
---
