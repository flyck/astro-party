---
const { request } = Astro;
import { db, eq, Parties, Participants, Tasks } from 'astro:db';
import {toastResponse, ToastError} from "../../../components/toast.astro"

console.info("Deleting Party Request")

const url = new URL(request.headers.get("Hx-Current-Url") || "")
const id = parseInt(url.pathname.split("/")[1] || "")

if (!id) {
  console.info("id missing")
  return new Response(JSON.stringify({message: "bad request"}),{status: 400})
}

try {
  console.info("Deleting party...")
  // TODO switch to SQL cascading delete once it is available
  await db.delete(Tasks).where(eq(Tasks.partyId, id))
  await db.delete(Participants).where(eq(Participants.partyId, id))
  const partyDeletionResult = await db.delete(Parties).where(eq(Parties.id, id)).returning()
  console.info("Party deleted: " + JSON.stringify(partyDeletionResult))

  if (partyDeletionResult[0].id != id) {
    throw new ToastError("warning", "Party not found")
  }
  return new Response(JSON.stringify({ ok: true }), {
    status: 200,
    headers: {
      "hx-redirect": `/`,
    },
  })
} catch(error) {
  if (error instanceof ToastError) {
    return toastResponse(error.level, error.message)
  }
  return toastResponse("error", "Something went wrong. :(")
}
---
