---
// component styles can't be inline:
// https://tailwindcss.com/docs/functions-and-directives#using-apply-with-per-component-css
import "../styles/toast.css";
---
<section id="toast-container" class="absolute left-0 right-0 m-4 flex flex-col gap-4 w-52 mx-auto">
</section>

<!-- Inspired from: https://dev.to/thisisthemurph/go-beyond-the-basics-mastering-toast-notifications-with-go-and-htmx-4ao3 -->
<script is:inline>
class Toast {
  /**
  * A class representing a Toast notification.
  * @param level {("info"|"success"|"warning"|"danger")}
  * @param message { string }
  */
  constructor(level, message) {
    this.level = level;
    this.message = message;
  }

  #makeToastContainerButton() {
    const button = document.createElement("button");
    button.classList.add("toast");
    button.classList.add("animate-slide-in-from-bottom");
    button.classList.add(`toast-${this.level}`);
    button.setAttribute("role", "alert");
    button.setAttribute("aria-label", "Close");
    button.addEventListener("click", () => button.remove());
    return button;
  }

  /**
  * Makes the element containing the body of the toast notification.
  * @returns {HTMLSpanElement}
  */
  #makeToastContentElement() {
    const messageContainer = document.createElement("span");
    messageContainer.textContent = this.message;
    return messageContainer;
  }

  /**
   * Displays the toast either in the designated position within an opened modal, or at the main spot within the layout.
   * Making toast messages top-level with html5 dialogs is apparently not trivial:
   * https://stackoverflow.com/questions/41815069/is-it-possible-to-position-a-div-on-top-of-a-dialog-tag-that-is-not-its-parent
   * @param toast the toast to display
   */
  #placeToast(toast) {
    const dialogs = document.querySelectorAll("dialog[open]");
    if(dialogs.length > 0) {
      for (const dialog of dialogs) {
        const errorResponse = dialog.querySelector('.error-response');
        errorResponse.replaceChildren();
        errorResponse.appendChild(toast);
      }
      return;
    }

    const containerQuerySelector = "#toast-container";
    const toastContainer = document.querySelector(containerQuerySelector);
    toastContainer.replaceChildren();
    toastContainer.appendChild(toast);
  }

  /**
  * Creates and displays the toast notifaction.
  */
  show() {
    const toast = this.#makeToastContainerButton();
    const toastContent = this.#makeToastContentElement()
    toast.appendChild(toastContent);

    this.#placeToast(toast);
    setTimeout(() => {
      toast.classList.add('opacity-0', 'transition-opacity', 'duration-1000');
    }, 2000);
    setTimeout(() => {
      toast.remove();
    }, 3000);
  }
}

/**
* Presents a toast notification when the `makeToast` event is triggered
* @param e {{detail: {level: string, message: string}}}
*/
function onMakeToast(e) {
  const toast = new Toast(e.detail.level, e.detail.message);
  toast.show();
}

document.body.addEventListener("makeToast", onMakeToast);
document.addEventListener(
  "astro:after-swap",
  () => {
    document.body.addEventListener("makeToast", onMakeToast);
  },
  { once: false }
);
</script>
