---
interface Props {
  class?: string
  selected: string
  assignees: {id: number, name: string}[]
  id: string
}

const { class: className, selected, id, assignees } = Astro.props;
---
<div class="border-b border-gray-500 p-2" id={id}>
  <div class="text-sm">Assignee:</div>
  <select id="taskAssigneeSelect" name="assignee"
          class="w-full px-2 text-sm rounded dark:bg-gray-800 text-gray-800 dark:text-gray-100 bg-white hover:border-gray-400 focus:outline-none">
    <option value="">Nobody</option>
    {assignees.map((assignee) => 
        <option value={assignee.id}>{assignee.name}</option>
    )}
  </select>
</div>

<script is:inline define:vars={{ id }}>
    // Select the given option from the dropdown
    function selectOptionByDataValue(newOption) {
       const selectElement = document.getElementById("taskAssigneeSelect");
       const options = Array.from(selectElement.options);
       const selectedOption = options.find((option) => option.value === newOption);
       if (selectedOption) {
         selectElement.value = selectedOption.value;
       }
    }
   
   
    // wait for the data-assignee to be set to be updated and select that value accordingly
    // this allows sharing of one modal and one dropdown between multiple
     const div = document.getElementById(id);
     const observer = new MutationObserver(() => {
       const dataAssignee = div.getAttribute('data-assignee');
       selectOptionByDataValue(dataAssignee);
     });
   
     observer.observe(div, {
       attributes: true,
       attributeFilter: ['data-assignee']
     });
</script>